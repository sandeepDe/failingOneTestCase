const express = require("express");
const { open } = require("sqlite");
const sqlite3 = require("sqlite3");
const path = require("path");
const dbPath = path.join(__dirname, "covid19India.db");

const app = express();
app.use(express.json());

let database = null;

const initializeDBAndServer = async () => {
  try {
    database = await open({
      filename: dbPath,
      driver: sqlite3.Database,
    });
    app.listen(3000, () => {
      console.log("server is starting at http://localhost:3000");
    });
  } catch (e) {
    console.log(`DATABASE ERROR ${e.message}`);
    process.exit(1);
  }
};

initializeDBAndServer();

const dbObjectToResponseObj = (dbObj) => {
  return {
    stateId: dbObj.state_id,
    stateName: dbObj.state_name,
    population: dbObj.population,
  };
};

const districtObjToResObj = (dbObj) => {
  return {
    districtId: dbObj.district_id,
    districtName: dbObj.district_name,
    stateId: dbObj.state_id,
    cases: dbObj.cases,
    cured: dbObj.cured,
    active: dbObj.active,
    deaths: dbObj.deaths,
  };
};

const totalObj = (dbObj) => {
  return {
    totalCases: dbObj.cases,
    totalCured: dbObj.cured,
    totalActive: dbObj.active,
    totalDeaths: dbObj.deaths,
  };
};

const lastObj = (dbObj) => {
  return {
    stateName: dbObj.state_name,
  };
};

app.get("/states/", async (request, response) => {
  const getQuery = `
    SELECT * FROM state;`;

  const responseArray = await database.all(getQuery);
  response.send(
    responseArray.map((eachItem) => dbObjectToResponseObj(eachItem))
  );
});

app.get("/states/:stateId/", async (request, response) => {
  const { stateId } = request.params;
  const getQuery = `
    SELECT * from state
    WHERE state_id = ${stateId};`;

  const responseArray = await database.get(getQuery);
  response.send(dbObjectToResponseObj(responseArray));
});

app.post("/districts/", async (request, response) => {
  const {
    districtName = "Bagalkot",
    stateId = 3,
    cases = 2323,
    cured = 2000,
    active = 315,
    deaths = 8,
  } = request.body;

  const postQuery = `
    INSERT INTO district(district_name , state_id , cases ,
        cured ,active ,deaths)
    VALUES 
        ('${districtName}' , ${stateId}, ${cases} , ${cured}, ${active}, ${deaths});`;
  await database.run(postQuery);
  response.send("District Successfully Added");
});

app.get("/districts/:districtId/", async (request, response) => {
  const { districtId } = request.params;
  const getQuery = `
    SELECT * FROM district
    WHERE district_id = ${districtId};`;
  const responseArray = await database.get(getQuery);
  response.send(districtObjToResObj(responseArray));
});

app.delete("/districts/:districtId/", async (request, response) => {
  const { districtId } = request.params;

  const deleteQuery = `
    DELETE FROM district
    WHERE district_id = ${districtId};
    `;
  const resObj = await database.run(deleteQuery);
  response.send("District Removed");
});

app.put("/districts/:districtId/", async (request, response) => {
  const { districtId } = request.params;
  const {
    districtName = "Nadia",
    stateId = 3,
    cases = 9628,
    cured = 6524,
    active = 3000,
    deaths = 104,
  } = request.body;

  const putQuery = `
    UPDATE district 
    SET 
        district_name = '${districtName}' ,
        state_id = ${stateId} ,
        cases = ${cases} ,
        cured = ${cured},
        active = ${active} ,
        deaths = ${deaths}
    WHERE
    district_id = ${districtId};
    `;
  const responseObj = await database.run(putQuery);
  response.send("District Details Updated");
});

app.get("/states/:stateId/stats/", async (request, response) => {
  const { stateId } = request.params;
  const getQuery = `
  SELECT
   *
  FROM state
  INNER JOIN district
  ON state.state_id = district.state_id
  WHERE state.state_id = ${stateId};`;

  const responseObj = await database.get(getQuery);
  response.send(totalObj(responseObj));
});

app.get("/states/:stateId/stats/", async (request, response) => {
  const { stateId } = request.params;
  const getStateStatsQuery = `
    SELECT
      SUM(cases),
      SUM(cured),
      SUM(active),
      SUM(deaths)
    FROM
      district
    WHERE
      state_id=${stateId};`;
  const stats = await database.get(getStateStatsQuery);
  console.log(stats);
  response.send({
    totalCases: stats["SUM(cases)"],
    totalCured: stats["SUM(cured)"],
    totalActive: stats["SUM(active)"],
    totalDeaths: stats["SUM(deaths)"],
  });
});

app.get("/districts/:districtId/details/", async (request, response) => {
  const { districtId } = request.params;
  const getStateNameQuery = `
    SELECT
      state_name
    FROM
      district
    NATURAL JOIN
      state
    WHERE 
      district_id=${districtId};`;
  const state = await database.get(getStateNameQuery);
  response.send({ stateName: state.state_name });
});

module.exports = app;
